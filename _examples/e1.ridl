webrpc = v1 # version of webrpc schema format (ridl or json)
name = example # name of your backend app
version = v0.0.1 # version of your schema

# bar
enum Intent: string
  #! foo
  - openSession
  - closeSession
  - validateSession

enum           Kind:            uint32
  - USER
# admin
  - ADMIN

struct             Empty

      # struct comment
struct     User
  - id: uint64
    + json = id
    + go.field.name = ID # dsadsa
    + go.tag.db = id

  - username: string
    + json = USERNAME
         +      go.tag.db      =        username       #!       far away

#! role?
               #! role!
  -           role:              string
    + go.tag.db = -

  - kind: Kind
    + json = kind

  - intent: Intent
    + json = intent ###! dsadasdasds
    + go.tag.db = -

struct Version
  - webrpcVersion: string
  - schemaVersion: string
  - schemaHash: string

struct ComplexType # dsdas
      # https://www.example.com/?first=1&second=12#help
  -      meta: map<string,any>
  - metaNestedExample: map<string,map<string,uint32>>
  - namesList: []string
  - numsList: []int64
  - doubleArray: [][]string
  - listOfMaps:        []map<string,uint32> # dsadasdasdas
  - listOfUsers:                 []User
  - mapOfUsers: map<string,User>
  - user: User

#!
#! Errors
#!
error      2      UserNotFound "User not found" HTTP 404
error 20 SpaceshipNotFound "Spaceship not found"       HTTP 404#adsad
error 300 Unsomething "Un what?" HTTP                      444
error 1  IAmFirst "I am first" HTTP 101

error 20         UserNotFound     "User not found" HTTP 404
error 4         UserTooYoung     ""  HTTP   404 


service ExampleService # oof
- Ping()
 - Status() => (status: bool)
  - Version() => (version: Version)
   - GetUser   (   header   :    map  <   string   ,   string   >   ,   userID   :    uint64   )   =>   (  code  :   uint32   ,   user  :   User  )
    - FindUser(s :SearchFilter) => (name: string, user: User) ###! last

